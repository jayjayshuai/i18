package com.example.i18n;

import jakarta.servlet.http.HttpServletRequest;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.List;
import java.util.Map;

@Aspect
@Component
public class EnhancedI18nAspect {

    @Autowired
    private StringRedisTemplate redisTemplate;

    @Around("execution(* com.example.controller..*.*(..))")
    public Object handleI18n(ProceedingJoinPoint pjp) throws Throwable {
        Object result = pjp.proceed();
        if (result == null) return null;

        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        String lang = request.getHeader("Accept-Language");
        if (!StringUtils.hasText(lang)) lang = "CN";

        injectI18n(result, lang);
        return result;
    }

    private void injectI18n(Object obj, String lang) {
        if (obj == null) return;

        if (obj instanceof Collection<?>) {
            for (Object item : (Collection<?>) obj) {
                injectI18n(item, lang);
            }
        } else if (obj instanceof Map<?, ?>) {
            for (Object value : ((Map<?, ?>) obj).values()) {
                injectI18n(value, lang);
            }
        } else if (obj instanceof Page<?>) {
            Page<?> page = (Page<?>) obj;
            for (Object item : page.getContent()) {
                injectI18n(item, lang);
            }
        } else {
            injectFields(obj, lang);
        }
    }

    private void injectFields(Object obj, String lang) {
        Class<?> clazz = obj.getClass();
        HashOperations<String, String, String> hashOps = redisTemplate.opsForHash();

        while (clazz != null && clazz != Object.class) {
            Field[] fields = clazz.getDeclaredFields();

            for (Field field : fields) {
                try {
                    field.setAccessible(true);
                    if (field.isAnnotationPresent(I18nField.class)) {
                        I18nField ann = field.getAnnotation(I18nField.class);
                        String redisKey = "i18n:" + ann.key();
                        String value = hashOps.get(redisKey, lang);
                        if (value != null) {
                            field.set(obj, value);
                        }
                    } else {
                        // 递归注入嵌套对象
                        Object nested = field.get(obj);
                        if (nested != null && !isPrimitiveOrWrapperOrString(nested.getClass())) {
                            injectI18n(nested, lang);
                        }
                    }
                } catch (Exception ignored) {}
            }
            clazz = clazz.getSuperclass();
        }
    }

    private boolean isPrimitiveOrWrapperOrString(Class<?> clazz) {
        return clazz.isPrimitive()
                || clazz == String.class
                || clazz == Boolean.class
                || clazz == Integer.class
                || clazz == Long.class
                || clazz == Short.class
                || clazz == Byte.class
                || clazz == Double.class
                || clazz == Float.class
                || clazz == Character.class;
    }
}
