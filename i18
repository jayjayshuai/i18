package com.jayshu.easychat.aspect;

import com.jayshu.easychat.annotation.I18nField;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.data.domain.Page;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Field;
import java.util.*;

@Aspect
@Component
public class FullI18nAspect {

    private final RedisTemplate<String, String> redisTemplate;
    private static final int MAX_DEPTH = 5;

    public FullI18nAspect(RedisTemplate<String, String> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    @Around("execution(* com.jayshu.easychat.controller..*.*(..))")
    public Object around(ProceedingJoinPoint pjp) throws Throwable {
        Object result = pjp.proceed();

        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        String lang = Optional.ofNullable(request.getHeader("Accept-Language")).orElse("CN");

        injectI18n(result, lang, new HashSet<>(), 0);

        return result;
    }

    private void injectI18n(Object obj, String lang, Set<Object> visited, int depth) {
        if (obj == null || visited.contains(obj) || depth > MAX_DEPTH) {
            return;
        }

        visited.add(obj);
        depth++;

        if (obj instanceof Collection<?>) {
            for (Object item : (Collection<?>) obj) {
                injectI18n(item, lang, visited, depth);
            }
        } else if (obj instanceof Map<?, ?>) {
            for (Object value : ((Map<?, ?>) obj).values()) {
                injectI18n(value, lang, visited, depth);
            }
        } else if (obj instanceof Page<?>) {
            for (Object item : ((Page<?>) obj).getContent()) {
                injectI18n(item, lang, visited, depth);
            }
        } else {
            injectFields(obj, lang, visited, depth);
        }
    }

    private void injectFields(Object obj, String lang, Set<Object> visited, int depth) {
        Class<?> clazz = obj.getClass();
        HashOperations<String, String, String> hashOps = redisTemplate.opsForHash();

        while (clazz != null && !clazz.equals(Object.class)) {
            Field[] fields = clazz.getDeclaredFields();

            for (Field field : fields) {
                try {
                    field.setAccessible(true);

                    if (field.isAnnotationPresent(I18nField.class)) {
                        I18nField ann = field.getAnnotation(I18nField.class);
                        String redisKey = "i18n:" + ann.value();
                        String value = hashOps.get(redisKey, lang);
                        if (value != null) {
                            field.set(obj, value);
                        }
                    } else {
                        Object nested = field.get(obj);
                        if (nested != null && !isPrimitiveOrWrapperOrString(nested.getClass())) {
                            injectI18n(nested, lang, visited, depth);
                        }
                    }
                } catch (Exception ignored) {}
            }

            clazz = clazz.getSuperclass();
        }
    }

    private boolean isPrimitiveOrWrapperOrString(Class<?> type) {
        return type.isPrimitive() ||
                type.equals(String.class) ||
                (type.isAssignableFrom(Number.class) ||
                        type.equals(Boolean.class) ||
                        type.equals(Character.class));
    }
}
